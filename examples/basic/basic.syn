module BasicSyntaxExample

//**
Multiline comment
Anything goes
even this **// because they must start the line
**//

// Anything here (single line comment)

set SOME_SET; // Anything here (single line comment)

//**
In commnents everything in code() must be well formed    
You can talk about code(SOME_SET) without typos;
**//

/*You can make sure you talk about correct code(set NEW_SET;) */ 

//But no comments inside code()

//**
code(set BASIC_SET;)         declares a finite type
code(Constant : SOME_SET)    in global scope declares constants
code(variable : SOME_SET)    in local scope declares variables
code(lhs = rhs)              is a predicate
lsh ::= rhs;                 lhs is defined by rhs
Constant := rhs              constants provided with values in example sections    
**//

ExampleConst /* Comment: Anything goes */ :SOME_SET;  


// ill-formed sections are for negative examples
ill-formed-begin
/**/*/
random stuff to fail compilation
%$ because for overall compilation
to suCeds%d, this needs to f4il.
ill-formed-end

ill-formed-begin CheckedComments
    // Your comment can check for typos like code(SOM_SET)
    // Less confusion, helps keep comments up to date
ill-formed-end

// example sections are for positive examples
// and constants can be given values here
example IllFormed
{
    SomeConst :SOME_SET;
    
    data
    SOME_SET := { a, b, c};

    ill-formed-begin
    SomeConst := "a";
    ill-formed-end;
}